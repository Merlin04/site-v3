---
import Layout from '../layouts/Layout.astro';
import { Content as About } from "../content/about.mdx";

---

<script src="../components/shaderbg"></script>

<Layout title="b smith">
	<div class="gap-5 pb-8">
		<div class="prose sm:prose-h1:text-4 side-line mb-4">
			<h1 class="mb-4">
				hi, i'm b<span class="text-0"> </span><span class="text-accent text-0">(she/they)</span>
			</h1>
			<div class="flex gap-3 justify-end w-full">
				<a href="#projects">[projects]</a>
				<a href="https://github.com/Merlin04">[github]</a>
				<a href="/resume.pdf">[resume]</a>
			</div>
		</div>
		<div class="prose">
			<About />
			<details>
				<summary>background animation controls!</summary>
				<div id="fun-mode-controls" class="bg-primary bg-opacity-40 p-2 rounded-md w-fit">
					{/* color inputs */}
					<div>
						<label for="fun-start-color" class="text-accent">start color</label>
						<input type="color" id="fun-start-color" class="h-6 w-8 rounded" />
					</div>
					<div>
						<label for="fun-end-color" class="text-accent">end color</label>
						<input type="color" id="fun-end-color" class="h-6 w-8 rounded" />
					</div>
					<button id="randomize-colors" class="btn">randomize colors</button>
					<script>
						import { emitRandomize } from "../components/state";
						document.getElementById("randomize-colors")!.addEventListener("click", () => emitRandomize());
					</script>
					<div>
						<label for="fun-speed" class="text-accent">speed</label>
						<input type="range" id="fun-speed" min="0" max="5" step="0.05" value="1" />
					</div>
				</div>
	
			</details>
		</div>
	</div>
</Layout>

<script>
	import { addStateListener, patchState, getState } from "../components/state";

	const funStartColor = document.getElementById("fun-start-color") as HTMLInputElement;
	const funEndColor = document.getElementById("fun-end-color") as HTMLInputElement;

	const toHex = (c: [number, number, number]) => "#" + c.map(n => n.toString(16).padStart(2, "0")).join("");
	const fromHex = (c: string) => [...c.replaceAll("#", "").matchAll(/.{2}/g)].map(n => parseInt(n as any, 16)) as [number, number, number];

	// restore from state
	const { shaderColors } = getState();
	funStartColor.value = toHex(shaderColors[0]);
	funEndColor.value = toHex(shaderColors[1]);

	const updateShaderColors = () => {
		patchState({
			shaderColors: [
				// rgb value arrays
				fromHex(funStartColor.value),
				fromHex(funEndColor.value)
			]
		});
	};

	[funStartColor, funEndColor].forEach(e => e.addEventListener("change", updateShaderColors));

	addStateListener(({ shaderColors }) => {
		funStartColor.value = toHex(shaderColors[0]);
		funEndColor.value = toHex(shaderColors[1]);
	}, ["shaderColors"]);

	const funSpeed = document.getElementById("fun-speed") as HTMLInputElement;

	// restore from state
	funSpeed.value = getState().animationSpeed.toString();

	funSpeed.addEventListener("change", () => {
		patchState({
			animationSpeed: Number(funSpeed.value)
		});
	});
</script>